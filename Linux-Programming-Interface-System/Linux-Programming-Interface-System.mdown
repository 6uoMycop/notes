## PIPES AND FIFOS
### Overview
**A pipe is a byte stream**

When we say that a pipe is a byte stream, we mean that there is no concept of messages or message boundaries when using a pipe.

**Reading from a pipe**

Attempts to read from a pipe that is currently empty block until at least one byte has been written to the pipe.

**Pipes are unidirectional**

Data can travel only in one direction through a pipe. One end of the pipe is used for writing, and the other end is used for reading.

**Pipes have a limited capacity**

A pipe is simply a buffer maintained in kernel memory. This buffer has a maximum capacity. Once a pipe is full, further writes to the pipe block until the reader removes some data from the pipe.

### Creating and Using Pipes
The *pipe()* system call creates a new pipe.
```C
#include <unistd.h>

int pipe(int fields[2]);
```
A successful call to *pipe()* returns two open file descriptors in the array *filedes*: one for the read end of the pipe (*filedes[0]*) and one for the write end (*filedes[1]*).

As with any file descriptor, we can use the *read()* and *write()* system calls to perform I/O on the pipe.

A pipe has few uses within a single process (we consider one in Section 63.5.2). Normally, we use a pipe to allow communication between two processes. To connect two processes using a pipe, we follow the *pipe()* call with a call to *fork()*. During a *fork()*, the child process inherits copies of its parent's file descriptors (Section 24.2.1), bringing about the situation shown on the left side of Figure 44-3.

While it is possible for the parent and child to both read from and write to the pipe, this is not usual. Therefore, immediately after the *fork()*, one process closes its descriptor for the write end of the pipe, and the other closes its descriptor for the read end. For example, if the parent is to send data to the child, then it would close its read descriptor for the pipe, *filedes[0]*, while the child would close its write descriptor for the pipe, *filedes[1]*, bringing about the situation shown on the right side of Figure 44-3. The code to create this setup is shown in Listing 44-1.

One reason that it is not usual to have both the parent and child reading from a single pipe is that if two processes try to simultaneously read from a pipe, we can't be sure which process will be the first to succeed - the two processes race for data. Preventing such races would require the use of some synchronization mechanism. However, if we require bidirectional communication, there is a simpler way: just create two pipes, one for sending data in each direction between the two processes.

**Pipes allow communication between related processes**

In the discussion so far, we have talked about using pipes for communication between a parent and a child process. However, pipes can be used for communication between any two (or more) related processes, as long as the pipe was created by a common ancestor before the series of *fork()* calls that led to the existence of the processes. (This is what we meant when we referred to *related processes* at the beginning of this chapter.) For example, a pipe could be used for communication between a process and its grandchild. The first process creates the pipe, and then forks a child that in turn forks to yield the grandchild. A common scenario is that a pipe is used for communication between two siblings - their parent creates the pipe, and then creates the two children. This is what the shell does when building a pipeline.

## SYSTEM V SHARED MEMORY
This chapter describes System V shared memory. Shared memory allows two or more processes to share the same region (usually referred to as a segment) of physical memory. Since a shared memory segment becomes part of a process's user-space memory, no kernel intervention is required for IPC. All that is required is that one process copies data into the shared memory; that data is immediately available to all other processes sharing the same segment. This provides fast IPC by comparison with techniques such as pipes or message queues, where the sending process copies data from a buffer in user space into kernel memory and the receiving process copies in the reverse direction. (Each process also incurs the overhead of a system call to perform the copy operation.)

### Overview
In order to use a shared memory segment, we typically perform the following steps:

- Call *shmget()* to create a new shared memory segment or obtain the identifier of an existing segment (i.e., one created by another process). This call returns a shared memory identifier for use in later calls.
- Use *shmat()* to attach the shared memory segment; that is, make the segment part of the virtual memory of the calling process.
- At this point, the shared memory segment can be treated just like any other memory available to the program. In order to refer to the shared memory, the program uses the *addr* value returned by the *shmat()* call, which is a pointer to the start of the shared memory segment in the process's virtual address space.
- Call *shmdt()* to detach the shared memory segment. After this call, the process can no longer refer to the shared memory. This step is optional, and happens automatically on process termination.
- Call *shmctl()* to delete the shared memory segment. The segment will be destroyed only after all currently attached processes have detached it. Only one process needs to perform this step.

### Creating or Opening a Shared Memory Segment
The *shmget()* system call creates a new shared memory segment or obtains the identifier of an existing segment. The contents of a newly created shared memory segment are initialized to 0.

```C
#include <sys/types.h>
#include <sys/shm.h>

int shmget(key_t key, size_t size, int shmflg);
```

When we use *shmget()* to create a new shared memory segment, *size* specifies a positive integer that indicates the desired size of the segment, in bytes. The kernel allocates shared memory in multiples of the system page size, so *size* is effectively rounded up to the next multiple of the system page size. If we are using *shmget()* to obtain the identifier of an existing segment, then *size* has no effect on the segment, but it must be less than or equal to the size of the segment.

> Unrelated processes can access the same shared segment by specifying the same key value.

The *shmflg* argument performs the same task as for the other IPC *get* calls, specifying the permissions (Table 15-4, on page 295) to be placed on a new shared memory segment or checked against an existing segment. In addition, zero or more of the following flags can be ORed (`|`) in *shmflg* to control the operation of *shmget()*:

- `IPC_CREAT`<br>
  If no segment with the specified *key* exists, create a new segment.

The above flags are described in more detail in Section 45.1. In addition, Linux permits the following nonstandard flags:

- `SHM_HUGETLB`<br>
  A privileged (`CAP_IPC_LOCK`) process can use this flag to create a shared memory segment that uses *huge pages*. Huge pages are a feature provided by many modern hardware architectures to manage memory using very large page sizes. (For example, x86-32 allows 4-MB pages as an alternative to 4-kB pages.) On systems that have large amounts of memory, and where applications require large blocks of memory, using huge pages reduces the number of entries required in the hardware memory management unit's translation look-aside buffer (TLB). This is beneficial because entries in the TLB are usually a scarce resource. See the kernel source file `Documentation/vm/hugetlbpage.txt` for further information.

On success, *shmget()* returns the identifier for the new or existing shared memory segment.

### Using Shared Memory
The *shmat()* system call attaches the shared memory segment identified by *shmid* to the calling process's virtual address space.

```C
#include <sys/types.h>
#include <sys/shm.h>

void *shmat(int shmid, const void *shmaddr, int shmflg);
```

The *shmaddr* argument and the setting of the `SHM_RND` bit in the *shmflg* bit-mask argument control how the segment is attached:

- If *shmaddr* is `NULL` , then the segment is attached at a suitable address selected by the kernel. This is the preferred method of attaching a segment.

As its function result, *shmat()* returns the address at which the shared memory segment is attached. This value can be treated like a normal C pointer; the segment looks just like any other part of the process's virtual memory.

## SOCKETS: ADVANED TOPICS
### The sendfile() System Call
Applications such as web servers and file servers frequently need to transfer the unaltered contents of a disk file through a (connected) socket. One way to do this would be a loop of the following form:
```C
while ((n = read(diskfilefd, buf, BUZ_SIZE)) > 0)
	write(sockfd, buf, n);
```
For many applications, such a loop is perfectly acceptable. However, if we frequently transfer large files via a socket. this technique is inefficient. In order to transmit the file, we must use two system calls (possibly multiple times within a loop): one to copy the file contents from the kernel buffer cache into user space, and the other to copy the user-space buffer back to kernel space in order to be transmitted via the socket. Such a two-step process is wasteful if the application doesn't perform any processing of the file contents before transmitting them. The *sendfile()* system call is designed to eliminate this inefficiency. When an application calls *sendfile()*, the file contents are transferred directly to the socket, without passing through user space.
```C
#include <sys/sendfile.h>

ssize_t sendfile(int out_fd, int in_fd, off_t *offset, size_t count);
```
The *sendfile()* system call transfers bytes from the file referred to by the descriptor *in_fd* to the file referred to by the descriptor *out_fd*. The *out_fd* descriptor must refer to a socket. The *in_fd* argument must refer to a file to which *mmap()* can be applied; in practice, this usually means a regular file.

If *offset* is not `NULL`, then it should point to an *off_t* value that specifies the starting file offset from which bytes should be transferred from *in_fd*. This is a value-result argument. On return, it contains the offset of the next byte following the last byte that was transferred from *in_fd*. In this case, *sendfile()* doesn't change the file offset for *in_fd*.

If *offset* is `NULL`, then bytes are transferred from *in_fd* starting at the current file offset, and the file offset is updated to reflect the number of bytes transferred.

The *count* argument specifies the number of bytes to be transferred. If end-of-file is encountered before *count* bytes are transferred, only the available bytes are transferred.

## FILE LOCKING
### Overview
**Advisory and mandatory locking**

In the remainder of this chapter, we'll distinguish locks as being either advisory or mandatory. By default, file locks are *advisory*. This means that a process can simply ignore a lock placed by another process. In order for an advisory locking scheme to be workable, each process accessing the file must cooperate, by placing a lock before performing file I/O. By contrast, a *mandatory* locking system forces a process performing I/O to abide by the locks held by other processes. We say more about this distinction in Section 55.4.

### File Locking with flock()
Although *fcntl()* provides a superset of the functionality provided by *flock()*, we nevertheless describe *flock()* because it is still used in some applications, and because it differs from *fcntl()* in some of the semantics of inheritance and release of locks.

```C
#include <sys/file.h>

int flock(int fd, int operation);
```
The *flock()* system call places a single lock on an entire file. The file to be locked is specified via an open file descriptor passed in *fd*. The operation argument specifies one of the values `LOCK_SH`, `LOCK_EX`, or `LOCK_UN`, which are described in Table 55-1.

Value | Description
------------ | -------------
`LOCK_SH` | Place a *shared* lock on the file referred to by *fd*
`LOCK_EX` | Place an *exclusive* lock on the file referred to by *fd*
`LOCK_UN` | Unlock the file referred to by *fd*
`LOCK_NB` | Make a nonblocking lock request

By default, *flock()* blocks if another process already holds an incompatible lock on a file. If we want to prevent this, we can OR (`|`) the value into *operation*. In this case, if another process already holds an incompatible lock on the file, *flock()* doesn't block, but instead returns -1, with *errno* set to `EWOULDBLOCK`.

Any number of processes may simultaneously hold a shared lock on a file. However, only one process at a time can hold an exclusive lock on a file. (In other words, exclusive locks deny both exclusive and shared locks by other processes.) Table 55-2 summarizes the compatibility rules for *flock()* locks. Here, we assume that process A is the first to place the lock, and the table indicates whether process B can then place a lock.

```
 -----------------------------------
|   Process A   |     Process B     |
|               |-------------------|
|               | LOCK_SH | LOCK_EX |
|-----------------------------------|
| LOCK_SH       | Yes     | No      |
| LOCK_EX       | No      | No      |
 -----------------------------------
```

Listing 55-1 demonstrates the use of *flock()*. This program locks a file, sleeps for a specified number of seconds, and then unlocks the file. The program takes up to three command-line arguments. The first of these is the file to lock. The second specifies the lock type (shared or exclusive) and whether or not to include the `LOCK_NB` (nonblocking) flag. The third argument specifies the number of seconds to sleep between acquiring and releasing the lock; this argument is optional and defaults to 10 seconds.

```C
#include <sys/file.h>
#include <fcntl.h>
#include "curr_time.h"
#include "tlpi_hdr.h"

int
main(int argc, char *argv[])
{
    int fd, lock;
    const char *lname;

    if (argc < 3 || strcmp(argv[1], "--help") == 0 ||
            strchr("sx", argv[2][0]) == NULL)
        usageErr("%s file lock [sleep-time]\n"
                 "    'lock' is 's' (shared) or 'x' (exclusive)\n"
                 "        optionally followed by 'n' (nonblocking)\n"
                 "     'secs' specifies time to hold lock\n", argv[0]);

    lock = (argv[2][0] == 's') ? LOCK_SH : LOCK_EX;
    if (argv[2][1] == 'n')
        lock |= LOCK_NB;

    fd = open(argv[1], O_RDONLY);
    if (fd == -1)
        errExit("open");

    lname = (lock & LOCK_SH) ? "LOCK_SH" : "LOCK_EX";

    printf("PID %ld: requesting %s at %s\n", (long)getpid(), lname,
            curr_time("%T"));

    if (flock(fd, lock) == -1) {
        if (errno == EWOULDBLOCK)
            fatal("PID %ld: already locked - bye!", (long)getpid());
        else
            errExit("flock (PID=%ld)", (long)getpid());
    }

    printf("PID %ld: granted %s at %s\n", (long)getpid(), lname,
            curr_time("%T"));

    sleep((argc > 3) ? getInt(argv[3], GN_NONNEG, "sleep-time") : 10);

    printf("PID %ld: releasing %s at %s\n", (long)getpid(), lname,
            curr_time("%T"));
    if (flock(fd, LOCK_UN) == -1)
        errExit("flock");

    exit(EXIT_SUCCESS);
}
```

### Mandatory Locking
The kinds of locks we have described so far are *advisory*. This means that a process is free to ignore the use of *fcntl()* (or *flock()*) and simply perform I/O on the file. The kernel doesn't prevent this. When using advisory locking, it is up to the application designer to:

- set appropriate ownership (or group ownership) and permissions for the file, so as to prevent noncooperating process from performing file I/O; and
- ensure that the processes composing the application cooperate by obtaining the appropriate lock on the file before performing I/O.

Mandatory locking is enabled on a file by the combination of having the set-group-ID permission bit turned on and the group-execute permission turned off. This combination of permission bits was otherwise meaningless and unused in earlier UNIX implementations. In this way, later UNIX systems added mandatory locking without needing to change existing programs or add new system calls. From the shell, we can enable mandatory locking on a file as follows:
```
$ chmod g+s,g-x /testfs/file
```
