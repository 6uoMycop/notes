Correct atomic commit protocol:
  TC sends "prepare" messages to A and B.
  A and B respond, saying whether they're willing to commit.
  If both say "yes", TC sends "commit" messages.
  If either says "no", TC sends "abort" messages.
  A/B "decide to commit" if they get a commit message.
  
We have two types of problems:
  Timeout. I'm up, but I don't recv a msg I expect.
  Reboot. I crashed, and I'm rebooting, and I need to clean up.
    
Let's deal with timeout first.
  Where do hosts wait for messages?
  1) TC waits for yes/no.
  2) A and B wait for commit/abort.

Handling TC timeout waiting for yes/no.
  TC has not sent any "commit" messages.
  So TC can safely abort, and send "abort" messages.

Handling A/B timeout while waiting for commit/abort.
  Let's talk about just B (A is symmetric).
  If B voted "no", it can unilaterally abort.
  So what if B voted "yes"?
  Can B unilaterally decide to abort?
    No! TC might have gotten "yes" from both,
    and sent out "commit" to A, but crashed before sending to B.
    So then A would commit and B would abort: incorrect.
  B can't unilaterally commit, either:
    A might have voted "no".

B could just wait forever until it gets commit/abort from TC.
  But you can do better than that:

Termination protocol for B if it voted "yes":
  B sends "status" request message to A.
    Asks if A knows whether transaction should commit.
  If B doesn't hear reply from A: no decision, wait for TC.
  If A received "commit" or "abort" from TC: B decides the same way.
    Can't disagree with TC...
  If A hasn't voted yes/no yet: B and A both abort.
    TC can't have decided "commit", so it will eventually hear from A or B.
  If A voted "no": B and A both abort.
    TC can't have decided "commit".
  If A voted "yes": no decision possible!
    TC might have decided "commit" and replied to client.
    Or TC might have timed out and aborted.
    A and B must wait for the TC.

How to handle crash/reboot?
  Big trouble if they reboot and don't remember saying "yes"!
    They might change their minds after the reboot.

How do you know what state you were in before the crash?
  We cannot send the message before writing the disk:
    Since then we might change our mind after the reboot.

Recovery protocol w/ non-volatile state:
  If you're the TC, and there's no "commit" on disk, abort.
    Because no commit on disk -> you didn't send any "commit" messages.
  If you're A/B, and no "yes" on disk, abort.
    No "yes" on disk -> didn't vote yes -> nobody could have committed.
  If you're A/B, and there is a "yes" on your disk:
    Ordinary termination protocol, might block.

This protocol is called "two-phase commit".
