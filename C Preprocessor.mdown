## Header Files
### Once-Only Headers
#### Double inclusion
The following C code demonstrates a real problem that can arise if #include guards are missing:

**File "grandfather.h"**
```C
struct foo {
    int member;
};
```
**File "father.h"**
```C
#include "grandfather.h"
```
**File "child.c"**
```C
#include "grandfather.h"
#include "father.h"
```
Here, the file "child.c" has indirectly included two copies of the text in the header file "grandfather.h". This causes a compilation error, since the structure type `foo` will thus be defined twice.
#### Use of #include guards
**File "grandfather.h"**
```C
#ifndef GRANDFATHER_H
#define GRANDFATHER_H

struct foo {
    int member;
};

#endif /* GRANDFATHER_H */
```
**File "father.h"**
```C
#include "grandfather.h"
```
**File "child.c"**
```C
#include "grandfather.h"
#include "father.h"
```
Here, the first inclusion of "grandfather.h" causes the macro `GRANDFATHER_H` to be defined. Then, when "child.c" includes "grandfather.h" the second time, the `#ifndef` test returns false, and the preprocessor skips down to the `#endif`, thus avoiding the second definition of `struct foo`. The program compiles correctly.

## Macros
### Stringizing
Sometimes you may want to convert a macro argument into a string constant. Parameters are not replaced inside string constants, but you can use the `'#'` preprocessing operator instead.

Here is an example of a macro definition that uses stringizing:
```C
#define WARN_IF(EXP) \
do {if (EXP) \
       fprintf(stderr, "Warning: " #EXP "\n"); } \
while (0)
WARN_IF (x == 0);
     -> do { if (x == 0)
           fprintf(stderr, "Warning: " " x == 0" "\n"); } while (0);
```

### Concatenation
When a macro is expanded, the two tokens on either side of each `'##'` operator are combined into a single token, which then replaces the `'##'` and the two original tokens in the macro expansion.

Consider a C program that interprets named commands. There probably needs to be a table of commands, perhaps an array of structures declared as follows:
```C
struct command
{
    char *name;
    void (*function) (void);
};

struct command commands [] =
{
    { "quit", quit_command},
    { "help", help_command},
    ...
}
```
It would be cleaner not to have to give each command name twice, once in the string constant and once in the function name. A macro which takes the name of a command as an argument can make this unnecessary. The string constant can be created with stringizing, and the function name by concatenating the argument with `'_command'`. Here is how it is done:
```C
#define COMMAND(NAME) { #NAME, NAME ## _command}

struct command commands[] =
{
    COMMAND (quit),
    COMMAND (help),
    ...
}
```

### Variadic Macros
variadic macros have a variable number of arguments; these are mostly useful for dealing with variadic functions (like `printf`) that also take a variable number of arguments.

To define a variadic macro, define a macro with arguments where the last argument is three periods: `...` . The macro `__VA_ARGS__` then expands to whatever arguments matched this ellipsis in the macro call.

For example:
```C
#include <stdio.h>

#define Warning(...) fprintf(stderr, __VA_ARGS__)

int
main(int argc, char **argv)
{
    Warning("%s: this program contains no useful code\n", argv[0]);
    
    return 1;
}
```
It is possible to mix regular arguments with `...`, as long as `...` comes last:
```C
#define Useless(format, ...) printf(format, __VA_ARGS__)
```
If your macro is complicated, you may want a more descriptive name for the variable argument than `__VA_ARGS__`. CPP permits this, as an extension. You may write an argument name immediately before the `'…'`; that name is used for the variable argument. The `Warning` macro above could be written
```C
#define Warning(args...) fprintf(stderr, args)
```

### Macro Pitfalls
#### Swallowing the Semicolon

```C
#define SAFE_FREE(p) free(p); p = NULL;
```
This can cause trouble before `else` statements:
```C
if (NULL != p)
    SAFE_FREE(p)
else
    .../* do something */
```
expands into
```C
if (NULL != p)
    free(p); p = NULL;
else
    .../* do something */
```
The definition of the macro `SAFE_FREE` can be altered to solve this problem, using a `do … while` statement.
