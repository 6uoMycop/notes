# pandas: powerful Python data analysis toolkit
## Intro to Data Structures
### DataFrame
#### Column selection, addition, deletion
```
>>> df['one']
a    1.0
b    2.0
c    3.0
d    NaN
Name: one, dtype: float64
>>> df['three'] = df['one'] * df['two']
>>> df['flag'] = df['one'] > 2
>>> df
   one  two  three   flag
a  1.0  1.0    1.0  False
b  2.0  2.0    4.0  False
c  3.0  3.0    9.0   True
d  NaN  4.0    NaN  False
```

## Essential Basic Functionality
### Iteration
#### iterrows
`iterrows()` allows you to iterate through the rows of a DataFrame as Series objects. It returns an iterator yielding each index value along with a Series containing the data in each row:
```
>>> for row_index, row in df.iterrows():
...     print('%s\n%s' % (row_index, row))
...
```

## Indexing and Selecting Data
### Different Choices for indexing

Object Type | Indexers
------------ | -------------
DataFrame | `df.loc[row_indexer,column_indexer]`

### Selection By Label
pandas provides a suite of methods in order to have **purely label based indexing**.

The `.loc` attribute is the primary access method. The following are valid inputs:
- A boolean array

### Selection By Position
pandas provides a suite of methods in order to get **purely integer based indexing**. The semantics follow closely python and numpy slicing. These are `0-based` indexing.
The `.iloc` attribute is the primary access method. The following are valid inputs:
- An integer e.g. `5`

### Duplicate Data
If you want to identify and remove duplicate rows in a DataFrame, there are two methods that will help: `duplicated` and `drop_duplicates`. Each takes as an argument the columns to use to identify duplicated rows.
- `drop_duplicates` removes duplicate rows.

By default, the first observed row of a duplicate set is considered unique, but each method has a `keep` parameter to specify targets to be kept.
- `keep='first'` (default): mark / drop duplicates except for the first occurrence.
- `keep=False`: mark / drop all duplicates.

```
>>> df2 = pd.DataFrame({'a': ['one', 'one', 'two', 'two', 'two', 'three', 'four'], 'b': ['x', 'y', 'x', 'y', 'x', 'x', 'x'], 'c': np.random.randn(7)})
>>> df2
>>> df2
       a  b         c
0    one  x  0.518533
1    one  y  0.262100
2    two  x  0.176776
3    two  y  0.492976
4    two  x  0.392744
5  three  x  0.734845
6   four  x -0.086436
>>> df2.drop_duplicates('a')
       a  b         c
0    one  x  0.518533
2    two  x  0.176776
5  three  x  0.734845
6   four  x -0.086436
```
Also, you can pass a list of columns to identify duplications.

## IO Tools (Text, CSV, HDF5, ...)
### CSV & Text files
#### Parsing options
`read_csv()` and accept the following arguments:
##### Basic

- **filepath_or_buffer**
  Either a path to a file, URL, or any object with a `read()` method.

- **sep**
  Delimiter to use.

##### Column and Index Locations and Names

- **header**
  Row number(s) to use as the column names, and the start of the data. Default behavior is as if `header=0` if no `names` passed, otherwise as if `header=None`.

- **names**
  List of column names to use.

#### Naming and Using Columns
##### Handling column names
A file may or may not have a header row. pandas assumes the first row should be used as the column names:
```
>>> data = 'a,b,c\n1,2,3\n4,5,6\n7,8,9'
>>> print(data)
a,b,c
1,2,3
4,5,6
7,8,9
>>> pd.read_csv(StringIO(data))
```
By specifying the `names` argument in conjunction with `header` you can indicate other names to use and whether or not to throw away the header row (if any):
```
>>> pd.read_csv(StringIO(data), names=['foo', 'bar', 'baz'], header=0)
   foo  bar  baz
0    1    2    3
1    4    5    6
2    7    8    9
>>> pd.read_csv(StringIO(data), names=['foo', 'bar', 'baz'], header=None)
  foo bar baz
0   a   b   c
1   1   2   3
2   4   5   6
3   7   8   9
```

#### Writing out Data
##### Writing to CSV format
The Series and DataFrame objects have an instance method `to_csv` which allows storing the contents of the object as a comma-separated-values file. The function takes a number of arguments. Only the first is required.

- `sep`: Field delimiter for the output file (default ",")
